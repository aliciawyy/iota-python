# -*- coding: utf-8 -*-

import shutil
import tempfile
import unittest
import iota
import iotapy
from test import utils
from iotapy.storage.providers import rocksdb


class TransactionValidatorTest(unittest.TestCase):
    MAINNET_MWM = 14
    TESTNET_MWM = 13

    def setUp(self):
        self.db_path = tempfile.mkdtemp()
        self.db_log_path = tempfile.mkdtemp()

        self.provider = rocksdb.RocksDBProvider(self.db_path, self.db_log_path, read_only=False)
        self.tangle = iotapy.storage.tangle.Tangle(self.provider)
        self.tx_validator = iotapy.validators.transaction.TransactionValidator(
            self.tangle, iotapy.network.TransactionRequester(self.tangle))

    def cleanUp(self):
        del self.provider.db
        del self.provider
        shutil.rmtree(self.db_path)
        shutil.rmtree(self.db_log_path)

    def test_verify_tx_is_solid(self):
        tx = self.get_tx_with_branch_trunk()
        self.assertTrue(self.tx_validator.check_solidity(tx.hash, False))
        self.assertTrue(self.tx_validator.check_solidity(tx.hash, True))

    def test_verify_tx_is_not_solid(self):
        tx = utils.get_random_transaction()
        tx.type = -1
        tx.value = 0
        self.tangle.store(tx.hash, tx, 'transaction')

        self.assertFalse(self.tx_validator.check_solidity(tx.hash, False))
        self.assertFalse(self.tx_validator.check_solidity(tx.hash, True))

    def get_tx_with_branch_trunk(self):
        trytes = (
            "99999999999999999999999999999999999999999999999999999999999999"
            "99999999999999999999999999999999999999999999999999999999999999"
            "99999999999999999999999999999999999999999999999999999999999999"
            "99999999999999999999999999999999999999999999999999999999999999"
            "99999999999999999999999999999999999999999999999999999999999999"
            "99999999999999999999999999999999999999999999999999999999999999"
            "99999999999999999999999999999999999999999999999999999999999999"
            "99999999999999999999999999999999999999999999999999999999999999"
            "99999999999999999999999999999999999999999999999999999999999999"
            "99999999999999999999999999999999999999999999999999999999999999"
            "99999999999999999999999999999999999999999999999999999999999999"
            "99999999999999999999999999999999999999999999999999999999999999"
            "99999999999999999999999999999999999999999999999999999999999999"
            "99999999999999999999999999999999999999999999999999999999999999"
            "99999999999999999999999999999999999999999999999999999999999999"
            "99999999999999999999999999999999999999999999999999999999999999"
            "99999999999999999999999999999999999999999999999999999999999999"
            "99999999999999999999999999999999999999999999999999999999999999"
            "99999999999999999999999999999999999999999999999999999999999999"
            "99999999999999999999999999999999999999999999999999999999999999"
            "99999999999999999999999999999999999999999999999999999999999999"
            "99999999999999999999999999999999999999999999999999999999999999"
            "99999999999999999999999999999999999999999999999999999999999999"
            "99999999999999999999999999999999999999999999999999999999999999"
            "99999999999999999999999999999999999999999999999999999999999999"
            "99999999999999999999999999999999999999999999999999999999999999"
            "99999999999999999999999999999999999999999999999999999999999999"
            "99999999999999999999999999999999999999999999999999999999999999"
            "99999999999999999999999999999999999999999999999999999999999999"
            "99999999999999999999999999999999999999999999999999999999999999"
            "99999999999999999999999999999999999999999999999999999999999999"
            "99999999999999999999999999999999999999999999999999999999999999"
            "99999999999999999999999999999999999999999999999999999999999999"
            "99999999999999999999999999999999999999999999999999999999999999"
            "99999999999999999999999999999999999999999999999999999999999999"
            "99999999999999999999999999999999999999999999999999999999999999"
            "999999999999999999999999999999999999CFDEZBLZQYA999999999999999"
            "9999999999999999999999999999ZZWQHWD99C99999999C99999999CKWWDBW"
            "SCLMQULCTAAJGXDEMFJXPMGMAQIHDGHRBGEMUYNNCOK9YPHKEEFLFCZUSPMCJH"
            "AKLCIBQSGWAS99999999999999999999999999999999999999999999999999"
            "99999999999999999999999999999999999999999999999999999999999999"
            "99999999999999999999999999999999999999999999999999999999999999"
            "99999999999999999999999999999999999999999999999999999999999999"
            "9999999")

        trunk = iota.Transaction.from_tryte_string(trytes)
        branch = iota.Transaction.from_tryte_string(trytes)
        trunk.type = -1
        branch.type = -1

        child = utils.get_random_transaction_with_trunk_and_branch(trunk.hash, branch.hash)
        child.value = 0

        self.tangle.store(trunk.hash, trunk, 'transaction')
        self.tangle.store(branch.hash, branch, 'transaction')
        self.tangle.store(child.hash, child, 'transaction')

        return child
